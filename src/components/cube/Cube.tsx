/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: FromSi (https://sketchfab.com/fromsi665)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/4cc7c1bf585f4b929ddd32f6cab3ba58
title: RUBIK'S CUBE
*/

import * as React from "react";
import * as THREE from "three";
import { useRef, useState, useEffect } from "react";
import { useFrame } from "react-three-fiber";
import { useGLTF } from "@react-three/drei/useGLTF";

import { useAnimations } from "@react-three/drei/useAnimations";
import { GLTFResult, ICubiePart } from "./CubeTypes";
import { cubeConfig2 } from "./CubeConstants";
import { Cubie } from "./Cubie";
// import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
// import { useSpring } from "react-spring";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const result = useGLTF("/cube.gltf") as GLTFResult;
  const { animations } = result;
  const { actions } = useAnimations(animations, (group as unknown) as any);
  ((window as unknown) as any).actions = actions;

  const halfPi = Math.PI / 2;
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-halfPi, 0, 0]}>
        <group position={[0, 0, 0]} rotation={[-halfPi, 0, -halfPi]}>
          <group rotation={[halfPi, 0, 0]}>
            {cubeConfig2(result).map((cubiePartList: ICubiePart[], i) => (
              <Cubie key={i} cubiePartList={cubiePartList} />
            ))}
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/cube.gltf");
